// Generated by CoffeeScript 1.7.1
(function() {
  var expect;

  expect = require('chai').expect;

  describe('WebRTC interopability', function() {
    beforeEach(function() {
      return this.webRTCInterop = require('../webrtc-interop');
    });
    describe('w3c standard names are present', function() {
      afterEach(function() {
        delete global.RTCPeerConnection;
        delete global.RTCSessionDescription;
        return delete global.RTCIceCandidate;
      });
      it('leaves the peer connection name the same', function() {
        var rtcPeerConnection;
        global.RTCPeerConnection = rtcPeerConnection = new Object;
        this.webRTCInterop.infectGlobal();
        return expect(RTCPeerConnection).to.eq(rtcPeerConnection);
      });
      it('leaves the session description name the same', function() {
        var rtcSessionDescription;
        global.RTCSessionDescription = rtcSessionDescription = new Object;
        this.webRTCInterop.infectGlobal();
        return expect(RTCSessionDescription).to.eq(rtcSessionDescription);
      });
      return it('leaves the session description name the same', function() {
        var rtcIceCandidate;
        global.RTCIceCandidate = rtcIceCandidate = new Object;
        this.webRTCInterop.infectGlobal();
        return expect(RTCIceCandidate).to.eq(rtcIceCandidate);
      });
    });
    return describe('w3c standard names are not present', function() {
      return describe('chrome names are present', function() {
        return it('sets chrome peer connection object to w3c name', function() {
          var webkitRtcPeerConnection;
          global.webkitRTCPeerConnection = webkitRtcPeerConnection = new Object;
          this.webRTCInterop.infectGlobal();
          return expect(RTCPeerConnection).to.eq(webkitRtcPeerConnection);
        });
      });
    });
  });

}).call(this);
